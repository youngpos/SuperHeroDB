@inject ISuperHeroService superHeroService
@inject IJSRuntime JSRuntime

<h3>EditSuperHero</h3>

@if (Hero.Id == 0)
{


    <h3>Create a new Hero</h3>}
else
{
    <h3>Edit '@Hero.HeroName'</h3>

}

<EditForm Model="Hero" OnSubmit="HandleSubmit">
    <div class="form-group">
        <label>First Name</label>
        <input @bind-value="@Hero.FirstName" class="form-control" />
    </div>
    <div class="form-group">
        <label>Last Name</label>
        <input @bind-value="@Hero.LastName" class="form-control" />
    </div>
    <div class="form-group">
        <label>Hero Name</label>
        <input @bind-value="@Hero.HeroName" class="form-control" />
    </div>
    <div class="form-group">
        <label>Comic</label><br />
        <InputRadioGroup @bind-Value="comicId" class="form-control">
            @foreach (var comic in superHeroService.Comics)
            {
                <InputRadio Value="@comic.Id" /><span style="padding-left: 5px;">@comic.Name</span><br />
            }
        </InputRadioGroup>
    </div>
    <button type="submit" class="btn btn-primary">Submit</button>
</EditForm>

@code {
    [Parameter]
    public SuperHeroDB.Shared.SuperHero Hero { get; set; } = new SuperHeroDB.Shared.SuperHero();

    int comicId = 1;

    protected async override Task OnParametersSetAsync()
    {
        await superHeroService.GetComics();
        comicId = Hero.Comic.Id;
    }


    async void HandleSubmit()
    {
        Hero.Comic = superHeroService.Comics.FirstOrDefault(c => c.Id == comicId);

        if (Hero.Id == 0)
            //Console.WriteLine("CREATE");
            await superHeroService.CreateSuperHero(Hero);

        else
            //Console.WriteLine("UPDATE");
            await superHeroService.UpdateSuperHero(Hero, Hero.Id);

        Console.WriteLine("Submit was called");
        JSRuntime.InvokeVoidAsync("console.log", Hero);

        //await superHeroService.CreateSuperHero(Hero);
    }
}
